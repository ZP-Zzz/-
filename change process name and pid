#pragma once
#include<ntifs.h>
#include<ntddk.h>

NTKERNELAPI UCHAR* PsGetProcessImageFileName(IN PEPROCESS Process);
NTKERNELAPI HANDLE PsGetProcessInheritedFromUniqueProcessId(IN PEPROCESS Process);

KIRQL WPOFFx64()
{
    KIRQL irql = KeRaiseIrqlToDpcLevel();
    UINT64 cr0 = __readcr0();
    cr0 &= 0xfffffffffffeffff;
    __writecr0(cr0);
    _disable();
    return irql;
}

void WPONx64(KIRQL irql)
{
    UINT64 cr0 = __readcr0();
    cr0 |= 0x10000;
    _enable();
    __writecr0(cr0);
    KeLowerIrql(irql);
}


VOID FindAndChangeUni(ULONG64 strAddr)
{
    PUNICODE_STRING uniStr = (PUNICODE_STRING)strAddr;
    ULONG len = uniStr->Length / 2;
    ULONG maxLen = uniStr->MaximumLength / 2;
    PWCHAR str = uniStr->Buffer;
    ULONG i = 0;
    KIRQL irql;

    if (!str || len < 11 || maxLen < 11)
    {

        return;
    }


    for (i = 0; i <= len - 11; ++i)
    {
        if (!_wcsnicmp(str + i, L"winmine.exe", 11))
        {
            break;
        }

    }

    if (i > len - 11)
    {
        return;
    }


    irql = WPOFFx64();
    //str可能是PEB中的，故try之
    __try {
        str[i] = 'F';
        str[i + 1] = 'u';
        str[i + 2] = 'c';
        str[i + 3] = 'k';
        str[i + 4] = 'Y';
        str[i + 5] = 'o';
        str[i + 6] = 'u';
        DbgPrint("写入成功\n");
    }
    __except (1)
    {
    }
    WPONx64(irql);
}

VOID FindAndChangeA(ULONG64 strAddr, ULONG len)
{
    PUCHAR str = (PUCHAR)strAddr;
    ULONG i = 0;
    KIRQL irql;
    if (!str || len < 11)
        return;

    for (i = 0; i <= len - 11; ++i)
    {
        if (!_strnicmp(str + i, "winmine.exe", 11))
            break;
    }

    if (i > len - 11)
        return;

    irql = WPOFFx64();
    //str可能是PEB中的，故try之
    __try
    {
        str[i] = 'F';
        str[i + 1] = 'u';
        str[i + 2] = 'c';
        str[i + 3] = 'k';
        str[i + 4] = 'Y';
        str[i + 5] = 'o';
        str[i + 6] = 'u';
        DbgPrint("写入成功\n");
    }
    __except (1) {
    }
    WPONx64(irql);
}

VOID ChangeName(ULONG64 pProcess)
{
    ULONG64 peb, ProcessParameters, ldr;
    ULONG64 InLoadOrderModuleList;
    ULONG64 InMemoryOrderModuleList;
    ULONG64 tmp;

    KAPC_STATE kapc;
    PUCHAR str;
    PWCHAR wstr;

    //get PEB
    peb = *(PULONG64)(pProcess + 0x3f8);

    KeStackAttachProcess((PEPROCESS)pProcess, &kapc);
    __try
    {
        ProcessParameters = *(PULONG64)(peb + 0x020);

        //ImagePathName
        FindAndChangeUni(ProcessParameters + 0x060);

        //CommandLine
        FindAndChangeUni(ProcessParameters + 0x070);

        //WindowTitle
        FindAndChangeUni(ProcessParameters + 0x0b0);

        //Ldr
        ldr = *(PULONG64)(peb + 0x018);

        //InLoadOrderModuleList->FullDllName
        InLoadOrderModuleList = *(PULONG64)(ldr + 0x010);
        FindAndChangeUni(InLoadOrderModuleList + 0x048);

        //InLoadOrderModuleList->BaseDllName
        FindAndChangeUni(InLoadOrderModuleList + 0x058);

        //InMemoryOrderModuleList->FullDllName
        InMemoryOrderModuleList = *(PULONG64)(ldr + 0x020);
        FindAndChangeUni(InMemoryOrderModuleList + 0x048);
    }
    __except (1)
    {
        KdPrint(("exception occured!"));
    }
    KeUnstackDetachProcess(&kapc);

    //EPROCESS-->ImageFileName
    FindAndChangeA(pProcess + 0x450, 16);

    //EPROCESS-->SeAuditProcessCreationInfo->ImageFileName
    FindAndChangeUni(*(PULONG64)(pProcess + 0x468));

    //EPROCESS->SectionObject->Segment->ControlArea->FileObject->FileName
    //should use MmIsAddressValid to verify
    /*tmp = *(PULONG64)(pProcess + 0x3b8);
    tmp = *(PULONG64)(tmp + 0x14);
    tmp = *(PULONG64)tmp;
    tmp = *(PULONG64)(tmp + 0x024);
    FindAndChangeUni(tmp + 0x030);*/

    //VAD
    //should use MmIsAddressValid to verify
    /*tmp = *(PULONG64)(pProcess + 0x11c);
    tmp = *(PULONG64)(tmp + 0x10);
    tmp = *(PULONG64)(tmp + 0x018);
    tmp = *(PULONG64)(tmp + 0x024);
    FindAndChangeUni(tmp + 0x030);*/
}


void ChangePID(ULONG64 pProcess, ULONG64 MyPID)
{
    ULONG64 UniqueProcessId, peb;
    KIRQL irql;
    KAPC_STATE kapc;
    //get PEB
    peb = *(PULONG64)(pProcess + 0x3f8);
    UniqueProcessId = *(PULONG64)(pProcess + 0x2e0);
    DbgPrint("当前PID：%d\n", UniqueProcessId);
    irql = WPOFFx64();
    *(PULONG64)(pProcess + 0x2e0) = MyPID;
    WPONx64(irql);

    KeStackAttachProcess((PEPROCESS)pProcess, &kapc);
    __try
    {
        irql = WPOFFx64();
        //AppCompatInfo
        *(PULONG64)(peb + 0x2e0) = MyPID;
        WPONx64(irql);
    }
    __except (1)
    {
        KdPrint(("exception occured!"));
    }
    KeUnstackDetachProcess(&kapc);
}

//根据进程 ID 返回进程 EPROCESS，失败返回 NULL,此函数在枚举进程中使用
PEPROCESS LookupProcess(HANDLE Pid)
{
    PEPROCESS eprocess = NULL;
    if (NT_SUCCESS(PsLookupProcessByProcessId(Pid, &eprocess)))
        return eprocess;
    else
        return NULL;
}

//寻找并修改指定进程
VOID FindProcessAndModify(UCHAR* Processname)
{
    ULONG i = 0;
    PEPROCESS eproc = NULL;
    for (i = 4; i < 262144; i = i + 4)
    {
        eproc = LookupProcess((HANDLE)i);
        if (eproc != NULL)
        {
            if (strstr(PsGetProcessImageFileName(eproc), Processname))
            {
                DbgPrint("Find it\n");
                //DbgPrint("EPROCESS = % p, PID = % ld, PPID = % ld, Name = % s", eproc, (DWORD64)PsGetProcessId(eproc), (DWORD64)PsGetProcessInheritedFromUniqueProcessId(eproc), PsGetProcessImageFileName(eproc));
                ChangeName(eproc);
                ChangePID(eproc, 0x0000000000000010);
            }
            ObDereferenceObject(eproc);
        }
    }
}


VOID DriverUnload(PDRIVER_OBJECT DriverObject)
{

    DbgPrint("DriverUnload\r\n");
}


NTSTATUS DriverEntry(IN PDRIVER_OBJECT  DriverObject, IN PUNICODE_STRING  RegistryPath)
{
    FindProcessAndModify("winmine.exe");
    DriverObject->DriverUnload = DriverUnload;
    return STATUS_SUCCESS;
}
